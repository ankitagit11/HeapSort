The min heap property requires that the parent node be lesser than its child node(s). Due to this, we can conclude that a non-leaf node cannot be the maximum element as its child node has a higher value. So we can narrow down our search space to only leaf nodes. In a min heap having n elements, there is ceil(n/2) leaf nodes. The time and space complexity remains O(n) as a constant factor of 1/2 does not affect the asymptotic complexity.

// C++ implementation of above approach
#include <bits/stdc++.h>
using namespace std;

// Function to find the
// maximumelement in a
// max heap
int findMaximumElement(int heap[], int n)
{
	int maximumElement = heap[n / 2];

	for (int i = 1 + n / 2; i < n; ++i)
		maximumElement = max(maximumElement, heap[i]);

	return maximumElement;
}

// Driver code
int main()
{
	// Number of nodes
	int n = 10;

	
	int heap[] = { 10, 25, 23, 45, 50, 30, 35, 63, 65, 81 };

	cout << findMaximumElement(heap, n);

	return 0;
}
